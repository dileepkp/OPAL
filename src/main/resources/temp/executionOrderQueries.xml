<?xml version="1.0"?>
<queries>

    <query id="0">
        PREFIX c:&lt;http://www.semanticweb.org/yzhao30/ontologies/2015/7/c#&gt;
        PREFIX file0:&lt;file:///home/demo/Downloads/PATO-ROSE-master/tools/onto-build-rose/test/word2vec.c#&gt;
        PREFIX owl:&lt;http://www.w3.org/2002/07/owl#&gt;
        PREFIX rdf:&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
        PREFIX rdfs:&lt;http://www.w3.org/2000/01/rdf-schema#&gt;
        PREFIX xsd:&lt;http://www.w3.org/2001/XMLSchema#&gt;
        PREFIX pa:&lt;http://www.semanticweb.org/aidb/ontologies/BugFindingOntology#&gt;
        PREFIX fl:&lt;http://www.semanticweb.org/aidb/ontologies/FileLibraryOntology#&gt;

    </query>


    <query id="1">
        SELECT ?s ?p ?o
        WHERE {
         ?s ?p ?o.
        }

    </query>
    
     <query id="globalVariables">
        SELECT DISTINCT ?s 
        WHERE {
         {?s rdf:type c:VariableDecl }
         UNION
         {?s rdf:type c:SgClassDeclaration }.
         {?s c:hasParent file0:0_0_0_0 }
         UNION
         {?s c:hasParent ?par . ?par rdf:type c:SgClassDefinition .
         ?par c:hasParent ?grandPar . ?grandPar rdf:type c:SgClassDeclaration .
         ?grandPar c:hasParent file0:0_0_0_0 .}.
        }
        ORDER BY ?s
    </query>
    
     <query id="globalVariablesWithoutStructures">
        SELECT DISTINCT ?s 
        WHERE {
         ?s rdf:type c:VariableDecl .
        ?s c:hasParent file0:0_0_0_0 .
        }
        ORDER BY ?s
    </query>
    
     <query id="functionStatementId">
        SELECT DISTINCT ?s 
        WHERE {
        ?s rdf:type c:FunctionDecl .
        ?s c:hasName ?par1 .
        }
        ORDER BY ?s
    </query>
    
    
  
    <!-- Select the program conditions that reach the query statement -->  
     <query id="2">
        SELECT ?o
        WHERE {
         ?pp pa:afterStatement file0:10_3_10_17.
         ?pp pa:hasProgramConditions ?cond.
         ?cond (rdf:item|pa:negItem)* ?o
        }
    </query>
    
    <!-- Select variables -->
    <query id="3">
        SELECT distinct ?var
        WHERE {
         ?var rdf:type c:Variable.
        }
    </query>
    
     <!-- Select the values of the variables which reaches the query statement -->  
     <query id="4">
        SELECT ?var ?val ?relation
        WHERE {
         ?st (pa:nextFalseStatement|pa:nextTrueStatement|pa:nextStatement) file0:10_3_10_17.
         ?var pa:hasPointerState ?ps.
         ?ps pa:atProgramPoint ?pp.
         ?pp pa:afterStatement ?st.
         ?ps pa:stateValue ?val.
         ?ps pa:stateRelation ?relation.
         }
    </query>
    
    <!-- Translate the program conditions to z3 conditons-->
    <!-- var and val combinations -->
    <query id="101">
        SELECT ?exp ?var ?op ?val ?dataType (1 as ?type)
        WHERE {
        ?exp rdf:type c:ExpressionStatement.
        ?exp rdf:type ?op .
        ?exp c:hasLeftOperand ?lval .
        ?exp c:hasRightOperand ?rval .
        ?lval rdf:type c:VariableRef .
        ?lval c:referTo ?var .
        ?rval rdf:type c:CastOp .
        ?rval c:hasOperand ?rval2 .
        ?rval2 rdf:type c:Value .
        ?rval2 c:hasValue ?val .
        ?rval2 c:hasType ?dataType.
        FILTER((?op != c:ExpressionStatement) &amp;&amp; (?dataType != c:pointer_type)).
        }
    </query>
    
     <query id="102">
        SELECT ?exp ?var ?op 
        WHERE {
    ?exp rdf:type c:ExpressionStatement .
    ?exp rdf:type ?op .
    ?exp c:hasOperand ?operand.
    ?operand rdf:type c:VariableRef .
    ?operand c:referTo ?var .
          FILTER(?op != c:ExpressionStatement).
        }
    </query>
    
      <query id="queryPoint">
        SELECT ?exp 
        WHERE {
    (?exp rdf:type c:ExpressionStatement),
		(?exp c:hasExpression ?func),		
		(?func rdf:type c:FunctionCall),
		(?func c:call ?call),
		(?call rdf:type c:FunctionRef),
		(?call c:hasName 'fputc')
      }
    </query>
    
    <query id="queryConditions">
        SELECT ?exp ?var ?op 
        WHERE {
                 (?exp rdf:type c:ExpressionStatement),
		(?exp c:hasExpression ?func),		
		(?func rdf:type c:FunctionCall),
		(?func c:call ?call),
		(?call rdf:type c:FunctionRef),
		(?call c:hasName 'fputc'),
		(?func c:hasArgumentExpr ?y),
		(?y c:NthArg "1"),
		(?y c:referTo ?var),
        ?st (pa:nextFalseStatement|pa:nextTrueStatement|pa:nextStatement) ?exp.
         ?var pa:hasPointerState ?ps.
         ?ps pa:atProgramPoint ?pp.
         ?pp pa:afterStatement ?st.
         ?ps pa:stateValue 0.
         ?ps pa:stateRelation pa:greaterThan.
        }
    </query>
    
    
</queries>
