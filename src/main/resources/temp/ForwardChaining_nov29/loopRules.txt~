@prefix c: <http://www.semanticweb.org/yzhao30/ontologies/2015/7/c#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix pa: <http://www.semanticweb.org/aidb/ontologies/BugFindingOntology#> .
@prefix fl: <http://www.semanticweb.org/aidb/ontologies/FileLibraryOntology#> .
@prefix file0: <ftp:/home/demo/Downloads/PATO-ROSE-master/tools/onto-build-rose/test/word2vec.c#> .


# Analyze For statement
[ForStatement1:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:ExpressionStatement),
		(?st c:hasParent ?forSt),
		(?loopList rdf:type pa:loopList)
		(?loopList rdf:item ?loopItem)
		(?forSt rdf:type ?loopItem)
		noValue(?forSt, pa:iteration)
		(?forSt c:hasForTest ?st)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->

		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
		(1 1 createNoConditionList(?st,?cond,?st,?iter,?baseConditions,?forSt))		
		(1 1 createYesConditionList2(?st,?cond,?st,1,?baseConditions,?prev,?pp))
		
		(?forSt pa:previousIterationIndex_0 ?iter)
		(?forSt pa:previousIterationIndex_1 0)
		(?forSt pa:iterationIndexEnable_0 ?cond)

		
#		(?forSt pa:iteration 1)
#		print('for st1')
]

# Analyze For statement.
[ForStatement2:
		(1 1 execute2(?prev,?st,?cond,?pp,?newI))
		(?st rdf:type c:ExpressionStatement)
		(?st c:hasParent ?forSt)
		(?loopList rdf:type pa:loopList)
		(?loopList rdf:item ?loopItem)
		(?forSt rdf:type ?loopItem)
		(?forSt c:hasForTest ?st)
		ge(?newI,2)
		le(?newI,3)
#		equal(?newI,2)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)


->

		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
		(1 1 createYesConditionList2(?st,?cond,?st,?newI,?baseConditions,?prev,?pp))
#		(?forSt pa:iteration ?newI)

		
#		(1 1 createNoConditionList(?st,?cond,?exp,?iter,?baseConditions))
#		print('for st2',?st,?cond)
]

# Analyze For statement.
[ForStatement3:
		(1 1 execute2(?prev,?st,?cond,?pp,?newI)),
		(?st rdf:type c:ExpressionStatement),
		(?st c:hasParent ?forSt),
		(?loopList rdf:type pa:loopList)
		(?loopList rdf:item ?loopItem)
		(?forSt rdf:type ?loopItem)
		(?forSt c:hasForTest ?st)

		equal(?newI,4)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
		remove(0)
		(1 1 createNoConditionList2(?st,?cond,?st,?newI,?baseConditions,?prev,?pp,?forSt))
#		print('for st3',?st,?cond)
]



# Analyze For statement
[WhileStatement1:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:ExpressionStatement),
		(?st c:hasParent ?forSt),
		(?loopList rdf:type pa:loopList)
		(?loopList rdf:item ?loopItem)
		(?forSt rdf:type ?loopItem)
		noValue(?forSt, pa:iteration)
		(?forSt c:hasCondition ?st)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->

		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
		(1 1 createNoConditionList(?st,?cond,?st,?iter,?baseConditions,?forSt))		
		(1 1 createYesConditionList2(?st,?cond,?st,1,?baseConditions,?prev,?pp))
		(?forSt pa:previousIterationIndex_0 ?iter)
	
#		(?forSt pa:iteration 1)
#		print('while st1')
]

# Analyze For statement.
[WhileStatement2:
		(1 1 execute2(?prev,?st,?cond,?pp,?newI))
		(?st rdf:type c:ExpressionStatement)
		(?st c:hasParent ?forSt)
		(?loopList rdf:type pa:loopList)
		(?loopList rdf:item ?loopItem)
		(?forSt rdf:type ?loopItem)
		(?forSt c:hasCondition ?st)
		ge(?newI,2)
		le(?newI,3)
#		equal(?newI,2)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->

		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
		(1 1 createYesConditionList2(?st,?cond,?st,?newI,?baseConditions,?prev,?pp))
#		(?forSt pa:iteration ?newI)

		(?forSt pa:previousIterationIndex_1 ?iter)
#		(1 1 createNoConditionList(?st,?cond,?exp,?iter,?baseConditions))
#		print('while st2')
]

# Analyze For statement.
[WhileStatement3:
		(1 1 execute2(?prev,?st,?cond,?pp,?newI)),
		(?st rdf:type c:ExpressionStatement),
		(?st c:hasParent ?forSt),
		(?loopList rdf:type pa:loopList)
		(?loopList rdf:item ?loopItem)
		(?forSt rdf:type ?loopItem)
		(?forSt c:hasCondition ?st)

		equal(?newI,4)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
#		(?forSt pa:iteration 4)
#		(1 1 completed(?forSt,?cond))
#		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1)),
#		(1 1 createYesConditionList(?st,?cond,?exp,?iter)),
		(1 1 createNoConditionList2(?st,?cond,?st,?newI,?baseConditions,?prev,?pp,?forSt))
#		(?forSt pa:totalIterations ?iter)
#		print('while st3')
]




