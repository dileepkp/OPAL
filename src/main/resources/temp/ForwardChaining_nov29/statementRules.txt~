@prefix c: <http://www.semanticweb.org/yzhao30/ontologies/2015/7/c#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix pa: <http://www.semanticweb.org/aidb/ontologies/BugFindingOntology#> .
@prefix fl: <http://www.semanticweb.org/aidb/ontologies/FileLibraryOntology#> .
@prefix file0: <ftp:/home/demo/Downloads/PATO-ROSE-master/tools/onto-build-rose/test/word2vec.c#> .



###############################################################################################################################
################################ Analyze other types of statements ############################################################

#A pointer variable declaration without assignment
[ParameterAssignStatement1:
(-2 -2 -2)
		(1 1 analyzeStatement(?st, ?pp, ?cond)),
		(?st rdf:type c:Variable),
		(?st c:hasBaseType c:char)
		(?pp pa:baseConditions ?baseConditions)
->
		remove(0)
#		print('parameter in func def' ,?st)
		(1 1 updateVarList(?st,?baseConditions))
		(1 1 makePS(?st, ?pp, ?cond))
		
]


#A pointer variable declaration without assignment
[ParameterAssignStatement1:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:Variable),
		(?st pa:tempStateValue ?stateVal)
		(?st pa:tempStateRelation  ?stateRel)
		(?st c:hasType c:pointer_type)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
		(1 1 updateVarList(?st,?baseConditions))
		(1 1 makePS2(?st, ?pp, ?cond,?stateVal, ?stateRel)),
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,?st))
		(1 1 completed(?st,?cond,?iter,?baseConditions))
#		print('parameter assignment in function call')
]


# Statement 1 in while(1)
[forInitStatement:
	(-2 -2 -2)
		(1 1 execute(?prev,?st,?cond,?pp)),
#		(?st rdf:type c:ForInitStatement)
		(?st c:hasExpression ?expr),
		(?expr rdf:type c:Value),
		(?expr c:hasValue 1),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)

->
#		print('Statement 1 in while(1)'),
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
]


# ForIncr Statemen
[forIncrStatement1:
		(1 1 execute(?prev,?st,?cond,?pp)),
(?st rdf:type c:PostfixIncrementOp)
(?st c:hasParent ?forSt)
		(?forSt c:hasForIncr ?st)
 (?pp pa:iteration ?i)
		le(?i,1)
		 addOne(?i,?newI)		
		(?st c:hasOperand ?operand)
		(?st c:hasType ?dt)
		(?operand rdf:type c:VariableRef)
		(?operand c:referTo ?var)
#		makeTemp(?ps)
		(?varList rdf:type pa:varList)
		(?varList pa:baseConditions ?baseConditions)		
		(?varList rdf:item ?var)
		(?var pa:hasPointerState ?ps2)
		(?ps2 pa:atProgramPoint ?prevPP)
		(?prevPP pa:afterStatement ?prev)
		(?prevPP pa:iteration ?iter3)
		(?pp pa:iteration ?iter3)
		(?pp pa:baseConditions ?baseConditions)
		(?ps2 pa:stateValue ?concreteVal)
		addOne(?concreteVal,?newVal)

		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)
		

->
		remove(0)
		(1 1 makePS2(?var, ?pp, ?cond,?newVal, pa:equals))
#		(?var pa:hasPointerState ?ps),
#		(?ps pa:atProgramPoint ?pp),
#		(?ps pa:stateValue ?newVal),
#		(?ps pa:stateRelation  pa:equals),
#		print('for incr',?i,?st,?cond),		
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,?var)),
		
#		(1 1 fixpointVerify(?st,?cond,?forSt,?newI,?i,?concreteVal,?ps,?newVal))		
		(1 1 completedForIncr(?st,?cond,?forSt,?newI,?baseConditions))
#		remove(4)


]


# ForIncr Statemen
[forIncrStatement2:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:PostfixIncrementOp)
		(?st c:hasParent ?forSt)
		(?forSt c:hasForIncr ?st)
		(?pp pa:iteration ?i)
		ge(?i,2)
		addOne(?i,?newI)		
		(?st c:hasOperand ?operand)
		(?st c:hasType ?dt)
		(?operand rdf:type c:VariableRef)
		(?operand c:referTo ?var)
#		makeTemp(?ps)
		(?pp pa:baseConditions ?baseConditions)

		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)
->
		remove(0)
		(1 1 makePS2(?var, ?pp, ?cond,pa:constant1, pa:equals))
#		print('for incr2',?i,?st,?cond),

#		(?var pa:hasPointerState ?ps),
#		(?ps pa:atProgramPoint ?pp),
#		(?ps pa:stateValue pa:constant1),
#		(?ps pa:stateRelation  pa:equals),

		(1 1 updateOtherVar(?prev,?st,?cond,?pp,?var)),
		
#		(1 1 fixpointVerify(?st,?cond,?forSt,?newI,?i,?concreteVal,?ps,?newVal))		
		(1 1 completedForIncr(?st,?cond,?forSt,?newI,?baseConditions))
#		remove(4)
]


# PostfixIncrement
[PostfixIncrement:
		(1 1 execute(?prev,?exp,?cond,?pp)),
		(?exp rdf:type c:ExpressionStatement),
		(?exp c:hasExpression ?st),		
		
		(?st rdf:type c:PostfixIncrementOp)
		(?st c:hasParent ?forSt)
		noValue(?forSt, c:hasForIncr, ?st)

		(?st c:hasOperand ?operand)
		(?st c:hasType ?dt)
		(?operand rdf:type c:VariableRef)
		(?operand c:referTo ?var)
		makeTemp(?ps)
		(?pp pa:baseConditions ?baseConditions)
		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)
	
		(?varList rdf:type pa:varList)		
		(?varList rdf:item ?var)
		(?varList pa:baseConditions ?baseConditions)
		(?var pa:hasPointerState ?ps2)
		(?ps2 pa:atProgramPoint ?prevPP)
		(?prevPP pa:afterStatement ?prev)
		(?prevPP pa:iteration ?iter3)
		(?pp pa:iteration ?iter3)
		(?prevPP pa:baseConditions ?baseConditions)
		(?ps2 pa:stateValue ?concreteVal)
		isLiteral(?concreteVal)
		addOne(?concreteVal,?newVal)
	
		
->
		remove(0)
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?pp),
#		print('PostfixIncrement',?ps2),
		(?ps pa:stateValue ?newVal),
		(?ps pa:stateRelation  pa:equals),
		(1 1 updateOtherVar(?prev,?exp,?cond,?pp,?var)),
		(1 1 completed(?exp,?cond,?iter3,?baseConditions))
]


# PostfixIncrement global
[PostfixIncrement:
		(1 1 execute(?prev,?exp,?cond,?pp)),
		(?exp rdf:type c:ExpressionStatement),
		(?exp c:hasExpression ?st),		
		
		(?st rdf:type c:PostfixIncrementOp)
		(?st c:hasParent ?forSt)
		noValue(?forSt, c:hasForIncr, ?st)

		(?st c:hasOperand ?operand)
		(?st c:hasType ?dt)
		(?operand rdf:type c:VariableRef)
		(?operand c:referTo ?var)
		(?pp pa:baseConditions ?baseConditions)
		(?pp pa:iteration ?iter)
	
		(?varList rdf:type pa:varList)		
		noValue(?varList,rdf:item,?var)
		(?varList pa:baseConditions ?baseConditions)
	
	
		
->
		remove(0)
#		print('PostfixIncrement global',?ps2),
		(1 1 updateOtherVar(?prev,?exp,?cond,?pp,1)),
		(1 1 completed(?exp,?cond,?iter,?baseConditions))
]


# PostfixDecrement
[PostfixDecrement:
		(1 1 execute(?prev,?exp,?cond,?pp)),
		(?exp rdf:type c:ExpressionStatement),
		(?exp c:hasExpression ?st),		
		
		(?st rdf:type c:PostfixDecrementOp)
		(?st c:hasParent ?forSt)
		noValue(?forSt, c:hasForIncr, ?st)

		(?st c:hasOperand ?operand)
		(?st c:hasType ?dt)
		(?operand rdf:type c:VariableRef)
		(?operand c:referTo ?var)
		makeTemp(?ps)
		(?pp pa:baseConditions ?baseConditions)
		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)
	
		(?varList rdf:type pa:varList)		
		(?varList rdf:item ?var)
		(?varList pa:baseConditions ?baseConditions)
		(?var pa:hasPointerState ?ps2)
		(?ps2 pa:atProgramPoint ?prevPP)
		(?prevPP pa:afterStatement ?prev)
		(?prevPP pa:iteration ?iter3)
		(?pp pa:iteration ?iter3)
		(?prevPP pa:baseConditions ?baseConditions)
		(?ps2 pa:stateValue ?concreteVal)
		isLiteral(?concreteVal)
		difference(?concreteVal,1,?newVal)
	
		
->
		remove(0)
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?pp),
#		print('PostfixDecrement',?i),
		(?ps pa:stateValue ?newVal),
		(?ps pa:stateRelation  pa:equals),
		(1 1 updateOtherVar(?prev,?exp,?cond,?pp,?var)),
		(1 1 completed(?exp,?cond,?iter,?baseConditions))
]



# Assignment Statement i = 0
[forInitStatement:
		(1 1 execute(?prev,?st,?cond,?pp)),
#		(?st rdf:type c:ForInitStatement)
		(?st c:hasExpression ?expr),
		(?expr rdf:type c:AssignOp),
		(?expr c:hasLeftOperand ?left),
		(?expr c:hasRightOperand ?right),
		(?left c:referTo ?var),
		(?right c:hasOperand ?val),
		(?val rdf:type c:Value),
		(?val c:hasValue ?concreteVal),
		(?val c:hasType c:int),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		makeTemp(?ps)

		(?varList rdf:type pa:varList),		
		(?varList rdf:item ?var),
		(?varList pa:baseConditions ?baseConditions)
		(?pp pa:baseConditions ?baseConditions)	
->
		
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?pp),
#		print('Assignment Statement local type i = 0 '),
		(?ps pa:stateValue ?concreteVal),
		(?ps pa:stateRelation  pa:equals),
		
		(1 1 completed(?st,?cond,?iter,?baseConditions))
(1 1 updateOtherVar(?prev,?st,?cond,?pp,?var))
]


# Assignment Statement i = 0
[forInitStatement:
		(1 1 execute(?prev,?st,?cond,?pp)),
#		(?st rdf:type c:ForInitStatement)
		(?st c:hasExpression ?expr),
		(?expr rdf:type c:AssignOp),
		(?expr c:hasLeftOperand ?left),
		(?expr c:hasRightOperand ?right),
		(?left c:referTo ?var),
		(?right c:hasOperand ?val),
		(?val rdf:type c:Value),
		(?val c:hasValue ?concreteVal),
		(?val c:hasType c:int),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		makeTemp(?ps)

		(?varList rdf:type pa:varList),		
		noValue(?varList, rdf:item, ?var),
		(?varList pa:baseConditions ?baseConditions)
		
->
		
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?pp),
#		print('Assignment Statement global type i = 0 '),
		(?ps pa:stateValue ?concreteVal),
		(?ps pa:stateRelation  pa:equals),
		
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
]

#A int variable declaration without assignment
[analyzeFirstStatement2:
		(1 1 execute(?prev,?st,?cond,?pp))
		(?st rdf:type c:Variable),
		noValue(?st,c:hasInitializer),
		(?st c:hasType ?dt)
		(?pp pa:baseConditions ?baseConditions)
		(?pp pa:iteration ?iter)

		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)
		makeTemp(?ps)
->
		
#		print('int variable declaration without assignment')
		(1 1 updateVarList(?st,?baseConditions))
		(?st pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?pp),
	
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,?st))
]

#statements of the form long long i=0;
[assign1:
		(1 1 execute(?prev,?vardecl,?cond,?pp))
		(?vardecl rdf:type c:VariableDecl)
		(?vardecl c:hasInitializer ?assign)
		(?vardecl c:hasType ?dt)
		(?assign rdf:type c:AssignInitializer)
		(?assign c:hasInitialValue ?operand)
		(?operand c:hasOperand ?value)
		(?value rdf:type c:Value)
		(?value c:hasValue ?concreteVal)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		makeTemp(?ps)
		
		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)

->
		(1 1 updateVarList(?vardecl,?baseConditions))
		(?vardecl pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?pp),
#		print('assign1',?vardecl),
		(?ps pa:stateValue ?concreteVal),
		(?ps pa:stateRelation pa:equals),
		
		(1 1 completed(?vardecl,?cond,?iter,?baseConditions))
(1 1 updateOtherVar(?prev,?vardecl,?cond,?pp,?vardecl))

]


#statements of the form long long i=0;
[assign1_1:
		(1 1 execute(?prev,?vardecl,?cond,?pp))
		(?vardecl rdf:type c:VariableDecl)
		(?vardecl c:hasInitializer ?assign)
		(?vardecl c:hasType ?dt)
		(?assign rdf:type c:AssignInitializer)
		(?assign c:hasInitialValue ?value)
#		(?operand c:hasOperand ?value)
		(?value rdf:type c:Value)
		(?value c:hasValue ?concreteVal)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		makeTemp(?ps)
		
		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)

->
		(1 1 updateVarList(?vardecl,?baseConditions))
#		(?vardecl pa:hasPointerState ?ps),
#		(?ps pa:atProgramPoint ?pp),
#		print('assign1',?vardecl),
#		(?ps pa:stateValue ?concreteVal),
#		(?ps pa:stateRelation pa:equals),
		(1 1 makePS2(?vardecl, ?pp, ?cond,?concreteVal, pa:equals))
		
		(1 1 completed(?vardecl,?cond,?iter,?baseConditions))
(1 1 updateOtherVar(?prev,?vardecl,?cond,?pp,?vardecl))

]



#A char variable declaration without assignment
[charVar:
		(1 1 execute(?prev,?st,?cond,?pp))
		(?st rdf:type c:Variable),
		noValue(?st,c:hasInitializer),
		(?st c:hasType c:char)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
#		print('charVar')
]

[arrayDeclaration:
		(1 1 execute(?prev,?st,?cond,?pp))
		(?st rdf:type c:Variable),
		(?st c:hasType c:array_type)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
#		print('arrayDeclaration')
]

[arrayVariableAssignment:
		(1 1 execute(?prev,?st,?cond,?pp))
		(?st rdf:type c:ExpressionStatement)
		(?st c:hasExpression ?expr)
		(?expr rdf:type c:AssignOp)
		(?expr c:hasLeftOperand ?left)
		(?left rdf:type c:ArraySub)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
#		print('arrayVariableAssignment')
]


# Assignment Statement i = j
[forInitStatement:
		(1 1 execute(?prev,?st,?cond,?pp)),
#		(?st rdf:type c:ForInitStatement)
		(?st c:hasExpression ?expr),
		(?expr rdf:type c:AssignOp),
		(?expr c:hasLeftOperand ?left),
		(?expr c:hasRightOperand ?right),
		(?left c:referTo ?var),
		(?right c:referTo ?var2),
		(?left c:hasType ?dt)

		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)

		(?intDataTypeList rdf:type pa:intDataTypeList)
		noValue(?intDataTypeList,rdf:item,?dt)
	
		
->
		
#		print('Skip Assignment Statement type i = j; i not int type'),
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
]


