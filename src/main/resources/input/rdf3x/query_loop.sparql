select  ?st 
where {
?st a <c#ForStatement>.
?st <c#hasForInit> ?init .
?st <c#hasForTest> ?test .
?st <c#hasForIncr> ?incr .


{
?init <c#hasExpression> ?einit.
?einit <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <c#AssignOp>.
?einit <c#hasLeftOperand> ?linit.
?linit <c#referTo> ?initVar.
}
union
{
?ass <c#hasParent> ?initVar .
?initVar <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <c#VariableDecl>.
?ass <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <c#AssignInitializer> .
filter(?init = ?initVar)
}



?test a ?testop.
filter (?testop = <c#LessOp> || ?testop = <c#GreaterOp> || ?testop = <c#LeqOp> || ?testop = <c#GeqOp>)
?test ?testoperand ?optest.
filter(?testoperand = <c#hasLeftOperand> || ?testoperand = <c#hasRightOperand>)
?optest <c#referTo> ?initVar.

{
?incr a ?incrType.
filter(?incrType = <c#PostfixIncrementOp> || ?incrType = <c#PostfixDecrementOp> || ?incrType = <c#AddAssignOp> || ?incrType = <c#SubAssignOp> || ?incrType = <c#AssignOp> )
?incr ?incroperand ?op.
filter(?incroperand = <c#hasOperand> || ?incroperand = <c#hasLeftOperand>)
?op <c#referTo> ?initVar.
}
union
{
?incr <c#hasRightOperand> ?rincr.
?rincr a ?rincrop .
filter(?rincrop = <c#SubOp> || ?rincrop = <c#AddOp>)
?rincr ?incroperand ?opincr.
 ?opincr <c#referTo> ?initVar.
filter(?incroperand = <c#hasRightOperand> || ?incroperand = <c#hasLeftOperand>)

}


}
