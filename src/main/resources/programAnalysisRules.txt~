@prefix c: <http://www.semanticweb.org/yzhao30/ontologies/2015/7/c#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix pa: <http://www.semanticweb.org/aidb/ontologies/BugFindingOntology#> .
@prefix fl: <http://www.semanticweb.org/aidb/ontologies/FileLibraryOntology#> .
@prefix file0: <ftp:/home/demo/Downloads/PATO-ROSE-master/tools/onto-build-rose/test/word2vec.c#> .

@include <fileLibraryRules.txt>.
@include <loopRules.txt>.
@include <statementRules.txt>.
@include <functionRules.txt>.


[beginExecution:
#		(?st rdf:type pa:beginExecutionStatement),
		(?st pa:beginExecutionInFunction ?func ),
		makeTemp(?pp), 
		makeTemp(?cond),
#list of variables
		makeTemp(?varList)
		makeTemp(?loopList)
		makeTemp(?intDataTypeList)
		makeTemp(?ignoreFuncCalls)
		
->
		print('begin execution',?func, ?st),
		(?pp rdf:type pa:ProgramPoint),
		(?cond rdf:type pa:conditionList),
		(?cond rdf:item 'true'),
#		(?cond rdf:rest rdf:nil),
		(?pp pa:afterStatement ?st),
		(?pp pa:hasProgramConditions ?cond),
		(?pp pa:iteration 0)
		(?pp pa:baseConditions ?cond)
		(?varList rdf:type rdf:list),
		(?varList rdf:type pa:varList),
		(?varList pa:inFunction ?func)
		(?varList pa:count 0)
		(?varList pa:baseConditions ?cond)
		(?loopList rdf:type pa:loopList)
		(?loopList rdf:item c:ForStatement)
		(?loopList rdf:item c:WhileStatement)

		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item c:int)
		(?intDataTypeList rdf:item c:long_long)
		(?intDataTypeList rdf:item c:long)
		(?intDataTypeList rdf:item c:unsigned_long)

		(?ignoreFuncCalls rdf:type pa:ignoreFuncCalls)
		(?ignoreFuncCalls rdf:item 'ungetc')
#		(?ignoreFuncCalls rdf:item 'strcpy')
#		(?ignoreFuncCalls rdf:item 'printf')
#		(?ignoreFuncCalls rdf:item 'scanf')
		
		(1 1 analyzeStatement(?st, ?pp, ?cond))

]


[callAFunction:
		(?st pa:firstStatementInFunction ?func )
		(?st pa:callFunction ?func)
		(?st pa:conditions ?cond)
		makeTemp(?pp), 
#list of variables
		makeTemp(?varList)
		makeTemp(?loopList)
		
->
#		print('begin execution'),
		(?pp rdf:type pa:ProgramPoint),
		(?pp pa:afterStatement ?st),
		(?pp pa:hasProgramConditions ?cond),
		(?pp pa:iteration 0)
		(?pp pa:baseConditions ?cond)
		(?varList rdf:type rdf:list),
		(?varList rdf:type pa:varList),
		(?varList pa:inFunction ?func)
		(?varList pa:count 0)
		(?varList pa:baseConditions ?cond)
		(?loopList rdf:type pa:loopList)
		(?loopList rdf:item c:ForStatement)
		(?loopList rdf:item c:WhileStatement)
		print('called a Function','beign st',?st)
		(1 1 analyzeStatement(?st, ?pp, ?cond))

]

#A pointer variable declaration without assignment
[analyzeFirstStatement1:
		(1 1 analyzeStatement(?st, ?pp, ?cond)),
		(?st rdf:type c:Variable),
		noValue(?st,c:hasInitializer),
		noValue(?st,pa:tempStateValue),
		(?st c:hasType c:pointer_type)
		(?st c:hasBaseType c:_IO_FILE)
		(?pp pa:baseConditions ?baseConditions)
->
		(1 1 makePS(?st, ?pp, ?cond)),
		(1 1 updateVarList(?st,?baseConditions))

]

#A long long variable declaration without assignment
[analyzeFirstStatement2:
		(1 1 analyzeStatement(?st, ?pp, ?cond)),
		(?st rdf:type c:Variable),
		noValue(?st,c:hasInitializer),
		(?st c:hasType ?dt)
		(?pp pa:baseConditions ?baseConditions)

		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)
->
		(1 1 updateVarList(?st,?baseConditions))
		(1 1 makePS(?st, ?pp, ?cond))
		
		print('A int type variable declaration without assignment')
]



# Skip array types
[analyzeFirstStatement3:
		(1 1 analyzeStatement(?st, ?pp, ?cond)),
		(?st rdf:type c:Variable),
		noValue(?st,c:hasInitializer),
		(?st c:hasType c:array_type)
		(?pp pa:baseConditions ?baseConditions)
		(?pp pa:iteration ?iter)

->
		
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVarCompleted(?st,?cond))
		print('analyze first statement: Skip array types')
]




############################################################################################################################
################################ Analyze If and loop statements ############################################################


# Analyze If statement.
[IfStatement:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:IfElseStatement),
		(?st c:hasCondition ?exp),
		(?exp rdf:type c:ExpressionStatement)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1)),
#		(1 1 createYesConditionList(?st,?cond,?exp,?iter,?baseConditions)),
#		(1 1 createNoConditionList(?st,?cond,?exp,?iter,?baseConditions))
#		(1 1 createYesConditionList2(?st,?cond,?exp,?iter,?baseConditions,?prev,?pp)),
#		(1 1 createNoConditionList2(?st,?cond,?exp,?iter,?baseConditions,?prev,?pp))
				
		print('if stmnt 1')
]


# Analyze If statement.
[IfStatement:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(1 1 updateOtherVarCompleted(?st,?cond))
		(?st rdf:type c:IfElseStatement),
		(?st c:hasCondition ?exp),
		(?exp rdf:type c:ExpressionStatement)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)

->
		remove(1)
#		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1)),
		(1 1 createYesConditionList(?st,?cond,?exp,?iter,?baseConditions)),
		(1 1 createNoConditionList(?st,?cond,?exp,?iter,?baseConditions))
		(?st pa:previousIterationIndex_0 ?iter)
		(?st pa:previousIterationIndex_1 ?iter)

#		(1 1 createYesConditionList2(?st,?cond,?exp,?iter,?baseConditions,?prev,?pp)),
#		(1 1 createNoConditionList2(?st,?cond,?exp,?iter,?baseConditions,?prev,?pp))
				
		print('if stmnt 2')
]



# Analyze return statement.
[ReturnStatement:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:ReturnStatement)
->
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
print('return')
]


# Analyze break statement.
[ReturnStatement:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:BreakStatement)
->
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
print('break')
]


# Analyze Continue statement.
[ContinueStatement:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:ContinueStatement)
->
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1))
print('Continue')
]

# If the true conditional block of a if-else statement has a return statement, then 
# the rest of function has a negated condition.
# disabled temporarily
[IfStatementWithReturn:
		(-2 -2 -2),
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:IfElseStatement),
		(?st c:hasCondition ?exp),
		(?exp rdf:type c:ExpressionStatement),
		(?st c:hasTrueBody ?trueBody),
		(?trueBody rdf:type c:Block),
		(?return rdf:type c:ReturnStatement),
		(?return c:hasParent  ?trueBody),
		(?st pa:afterIfBlock ?afterIf)
->
		(?afterIf pa:inheritsCondition negOf(?exp))
]

# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExit:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?par pa:previousIterationIndex_0 ?index)		
		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?st c:hasParent ?par)
		
		(?varList rdf:type pa:varList),		
		(?varList rdf:item ?var),
		(?varList pa:baseConditions ?baseConditions)
		(?pp pa:baseConditions ?baseConditions)		
#		noValue(?par,rdf:type,c:IfElseStatement)
		
->
		remove(1)
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1)),
		(1 1 totalIterations(?st,?cond,?iter,?var,?index))
		(1 1 completed(?st,?cond,?iter,?baseConditions))
print('dummy cfg exit false',?st)
]


# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExit:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?par pa:previousIterationIndex_1 ?index)		
		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?st c:hasParent ?par)

		(?varList rdf:type pa:varList),		
		(?varList rdf:item ?var),
		(?varList pa:baseConditions ?baseConditions)
		(?pp pa:baseConditions ?baseConditions)		
#		noValue(?par,rdf:type,c:IfElseStatement)
		
->
		remove(0)		
		remove(1)
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1)),
		(1 1 totalIterations(?st,?cond,?iter,?var,?index))
		(1 1 completed(?st,?cond,?iter,?baseConditions))
print('dummy cfg exit true',?st)
]


############################################################################################################################
################################ Make Variable states and conditions #######################################################

# yes and No condition list can be merged?


[createYesConditionList:
		(1 1 createYesConditionList(?prev,?cond,?exp,?iter,?baseConditions)),
		makeTemp(?cond2)
->
		(?cond2 rdf:type pa:conditionList),
		(?cond2 rdf:item ?cond),
		(?cond2 rdf:item ?exp),
#		(1 1 updateOtherVar(?prev,?st,?cond2,?pp,1))
		(1 1 updateOtherVarCompleted(?prev,?cond2))
		(1 1 completedYesCondition(?prev,?cond2,?iter,?baseConditions))
print(' yes condition')
]



[createYesConditionList:
		(-2 -2 -2)
		(1 1 createYesConditionList2(?prev,?cond,?exp,?iter,?baseConditions,?prevprev,?pp)),
		makeTemp(?cond2)
->
		(?cond2 rdf:type pa:conditionList),
		(?cond2 rdf:item ?cond),
		(?cond2 rdf:item ?exp),
		(1 1 updateOtherVar(?prevprev,?prev,?cond2,?pp,1))
		(1 1 completedYesCondition(?prev,?cond2,?iter,?baseConditions))
print(' yes condition 2','prevprev',?prevprev,'prev',?prev)
]

[createYesConditionList:
		(1 1 createYesConditionList2(?prev,?cond,?exp,?iter,?baseConditions,?prevprev,?pp)),
		makeTemp(?cond2)
		makeTemp(?pp2)
->
		(?cond2 rdf:type pa:conditionList),
		(?cond2 rdf:item ?cond),
		(?cond2 rdf:item ?exp),

		(?pp2 rdf:type pa:ProgramPoint),
		(?pp2 pa:afterStatement ?prev),
		(?pp2 pa:hasProgramConditions ?cond2),
		(?pp2 pa:iteration ?iter)
		(?pp2 pa:baseConditions ?baseConditions)

		(1 1 updateOtherVar(?prevprev,?prev,?cond2,?pp2,1))
		(1 1 completedYesCondition(?prev,?cond2,?iter,?baseConditions))
print(' yes condition 2','prevprev',?prevprev,'prev',?prev)
]

[createNoConditionList:
		(1 1 createNoConditionList(?prev,?cond,?exp,?iter,?baseConditions)),
		makeTemp(?cond2)
		
->
		(?cond2 rdf:type pa:conditionList),
		(?cond2 rdf:item ?cond),
		(?cond2 pa:negItem ?exp),
		(1 1 updateOtherVarCompleted(?prev,?cond2))
		(1 1 completedNoCondition(?prev,?cond2,?iter,?baseConditions)),
	print('completed no condition')
]



[createNoConditionList2:
		(1 1 createNoConditionList2(?prev,?cond,?exp,?iter,?baseConditions,?prevprev,?pp)),
		makeTemp(?cond2)
		
->
		(?cond2 rdf:type pa:conditionList),
		(?cond2 rdf:item ?cond),
		(?cond2 pa:negItem ?exp),
		(1 1 updateOtherVar(?prevprev,?prev,?cond2,?pp,1))
		(1 1 completedNoCondition(?prev,?cond2,?iter,?baseConditions)),
	print('completed no condition2')
]


# Different ways of making variable states
[makePointerState1:
		(1 1 makePS(?var, ?pp, ?cond)),
		makeTemp(?ps)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?pp),
		(1 1 completed(?var,?cond,?iter,?baseConditions))
		(1 1 updateOtherVarCompleted(?var,?cond))
 print('make ps',?var)
]

[makePointerState2:
		(1 1 makePS2(?var, ?pp, ?cond,?stateVal, ?stateRel))
		makeTemp(?ps)
		(?pp pa:iteration ?iter)
		noValue(1,1,updateVarList(?var,?z1))
->
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?pp),
		(?ps pa:stateValue ?stateVal),
		(?ps pa:stateRelation ?stateRel),
		remove(0)
#		(1 1 completed(?var,?cond,?iter))
#		(1 1 updateOtherVarCompleted(?var,?cond))
 print('make ps2')
]

		

# List of variables
[updateVarList:
		(1 1 updateVarList(?st,?baseConditions))
		(?varList rdf:type pa:varList)
		(?varList pa:count ?c)
		addOne(?c,?c1)
		noValue(?varList,rdf:item,?st)
		(?st rdf:type c:Variable)
		(?varList pa:baseConditions ?baseConditions)

		(?varList pa:inFunction ?func)
		(?st c:hasScope ?func)
->
		(?varList rdf:item ?st)
		remove(0)
		remove(2)
		(?varList pa:count ?c1)
		print('varList', ?c1, ?func)

]

[updateOtherVar0:
		(1 1 updateOtherVar(?prev,?next,?cond,?pp,?currVar)),
		noValue(pa:otherVarCount ?t2 updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		notEqual(?currVar,1)
		noValue(1, 1, makePS2(?next, ?pp, ?cond,?stateVal, ?stateRel))
		noValue(1,1,updateVarList(?currVar,?z1))
->
		(pa:otherVarCount 1 updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		print('update other Var 0_1',?next)
]


[updateOtherVar0:
		(1 1 updateOtherVar(?prev,?next,?cond,?pp,?currVar)),
		noValue(pa:otherVarCount ?t2 updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		equal(?currVar,1)
		noValue(1, 1, makePS2(?next, ?pp, ?cond,?stateVal, ?stateRel))
		noValue(1,1,updateVarList(?z2,?z1))
->
		(pa:otherVarCount 0 updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		print('update other Var 0_0',?next)
]

#update programPoint of other vars.
#applied when prev is not cfg exit of for statement
#when prev and next are in same iteration
[updateOtherVar:
		(1 1 updateOtherVar(?prev,?next,?cond,?pp,?currVar)),
		(pa:otherVarCount ?cnt updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		addOne(?cnt,?cnt1)
		(?varList rdf:type pa:varList),		
		(?varList rdf:item ?var),
		(?varList pa:baseConditions ?baseConditions)
		(?pp pa:baseConditions ?baseConditions)		
		notEqual(?var, ?currVar),
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?prevPP),
		(?prevPP pa:afterStatement ?prev)
		(?prevPP pa:iteration ?iter)
		(?pp pa:iteration ?iter)
		noValue(1,1,totalIterations(?prev,?cond,?iter2,?var,?index))
		noValue(?ps pa:atProgramPoint ?pp)
		
->
		(?ps pa:atProgramPoint ?pp)
		remove(1)
		(pa:otherVarCount ?cnt1 updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		print('update other Var 1',?var,'st:',?next)
#		(11 ?var updateOtherVar(?prev,?next,?cond,?pp,?currVar))
#(1 1 updateOtherVarProcessed(?prev,?next,?cond,?pp,?currVar))

]

#if the prev is cfg exit of for loop, consider only the last iteration

#update programPoint of other vars.
#applied when prev is cfg exit of for statement
[updateOtherVar2:
		(1 1 updateOtherVar(?prev,?next,?cond,?pp,?currVar)),
		(1 1 totalIterations(?prev,?cond,?iter,?var,?index))
(pa:otherVarCount ?cnt updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		addOne(?cnt,?cnt1)
		
		(?varList rdf:type pa:varList),		
		(?varList rdf:item ?var),
		(?varList pa:baseConditions ?baseConditions)
		(?pp pa:baseConditions ?baseConditions)		
		notEqual(?var, ?currVar),
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?prevPP),
		(?prevPP pa:afterStatement ?prev)
		strConcat(?prev,?prev2)
		regex(?prev2,'.*exit$')
		(?prev c:hasParent ?prevprev)
		(?loopList rdf:type pa:loopList)
		(?loopList rdf:item ?loopItem)
		(?prevprev rdf:type ?loopItem)
		
		(?prevPP pa:iteration ?iter)
		
		makeTemp(?pp4)
		(?pp pa:afterStatement ?next),
		(?pp pa:hasProgramConditions ?cond),
#		(?pp pa:iteration ?iter)

->
		(?pp4 pa:afterStatement ?next),
		(?pp4 pa:hasProgramConditions ?cond),
		(?pp4 pa:iteration ?index)
		(?pp4 pa:baseConditions ?baseConditions)		
		remove(1)
		remove(2)
		(pa:otherVarCount ?cnt1 updateOtherVar(?prev,?next,?cond,?pp,?currVar))

		(?ps pa:atProgramPoint ?pp4)
#		(21 ?var updateOtherVar(?prev,?next,?cond,?pp4,?currVar))
print('updateOtherVar2',?var,'st:',?next)
#(1 1 updateOtherVarProcessed(?prev,?next,?cond,?pp,?currVar))

]

#applied within loops
[updateOtherVar3:
		(1 1 updateOtherVar(?prev,?next,?cond,?pp,?currVar)),
(pa:otherVarCount ?cnt updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		addOne(?cnt,?cnt1)
		(?varList rdf:type pa:varList),		
		(?varList rdf:item ?var),
		(?varList pa:baseConditions ?baseConditions)
		(?pp pa:baseConditions ?baseConditions)		
		notEqual(?var, ?currVar),
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?prevPP),
		(?prevPP pa:afterStatement ?prev)

		(?prevPP pa:iteration ?iter)
		addOne(?iter,?iter3)
		(?pp pa:iteration ?iter2)
		equal(?iter2,?iter3)

		noValue(?ps pa:atProgramPoint ?pp)
		
->

		(?ps pa:atProgramPoint ?pp)
		remove(1)
		(pa:otherVarCount ?cnt1 updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		print('update other Var 3',?var,'st:',?next)
#		(13 ?var updateOtherVar(?prev,?next,?cond,?pp,?currVar))
#(1 1 updateOtherVarProcessed(?prev,?next,?cond,?pp,?currVar))

]

[updateOtherVarComplete:
		(?varList rdf:type pa:varList)
		(?varList pa:count ?c)
		(pa:otherVarCount ?cnt1 updateOtherVar(?prev,?next,?cond,?pp,?currVar))
		equal(?c,?cnt1)
		(?varList pa:baseConditions ?baseConditions)
		(?pp pa:baseConditions ?baseConditions)		
		
->
		remove(2)
		(1 1 updateOtherVarCompleted(?next,?cond))
		print('update other var remove','count',?c,'st',?next)
]


##################################################################################################################
################################ Pass Control ####################################################################

# if the previous statement is not a conditional
[passControl:
		(1 1 completed(?prev,?cond,?iter,?baseConditions)),
		(1 1 updateOtherVarCompleted(?prev,?cond))
		(?prev pa:nextStatement ?next),
		makeTemp(?pp)
->
#		remove(1)
		(?pp rdf:type pa:ProgramPoint),
		(?pp pa:afterStatement ?next),
		(?pp pa:hasProgramConditions ?cond),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(1 1 execute(?prev,?next,?cond,?pp)),
		print(?prev, ?next,'pass control 1','iter',?iter)
		print('')
]


[passControl4:
		(1 1 completedForIncr(?prev,?cond,?forSt,?i,?baseConditions)),
#		(1 1 updateOtherVarCompleted(?prev,?cond))
		(?prev pa:nextStatement ?next),
		makeTemp(?pp)
->

		(?pp rdf:type pa:ProgramPoint),
		(?pp pa:afterStatement ?next),
		(?pp pa:hasProgramConditions ?cond),
		(?pp pa:iteration ?i)
		(?pp pa:baseConditions ?baseConditions)
		(1 1 execute2(?prev,?next,?cond,?pp,?i)),
		print(?prev, ?next, 'pass control 4')
		print('pass control4')
		print('')
]


# if the previous statement is an If conditional
[passControl2:
		(1 1 completedYesCondition(?prev,?cond,?iter,?baseConditions)),
		(1 1 updateOtherVarCompleted(?prev,?cond))
		(?prev pa:nextTrueStatement ?next),
		makeTemp(?pp)
->
#		remove(1)
		(?pp rdf:type pa:ProgramPoint),
		(?pp pa:afterStatement ?next),
		(?pp pa:hasProgramConditions ?cond),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(1 1 execute(?prev,?next,?cond,?pp)),
		print(?prev, ?next, 'true','iter',?iter)
		print('')
]

# if the previous statement is an If conditional
[passControl3:
		(1 1 completedNoCondition(?prev,?cond,?iter,?baseConditions)),
#		(1 1 updateOtherVarCompleted(?prev,?cond))
		(?prev pa:nextFalseStatement ?next),
		makeTemp(?pp)
#		(-2 -2 -2)
->

		(?pp rdf:type pa:ProgramPoint),
		(?pp pa:afterStatement ?next),
		(?pp pa:hasProgramConditions ?cond),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(1 1 execute(?prev,?next,?cond,?pp)),
		print(?prev, ?next, 'false')
		print('')
]


