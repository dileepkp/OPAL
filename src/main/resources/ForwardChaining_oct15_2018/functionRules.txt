@prefix c: <http://www.semanticweb.org/yzhao30/ontologies/2015/7/c#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix pa: <http://www.semanticweb.org/aidb/ontologies/BugFindingOntology#> .
@prefix fl: <http://www.semanticweb.org/aidb/ontologies/FileLibraryOntology#> .
# @prefix file0: <ftp:/home/demo/Downloads/PATO-ROSE-master/tools/onto-build-rose/test/word2vec.c#> .


# inter-procedural function call
# if the function call has same name and one of the paremeters
# is of FILE type
[IPCall:
		(1 1 execute(?prev,?exp,?cond,?pp)),
		(?exp rdf:type c:ExpressionStatement),
		(?exp c:hasExpression ?func),		
		(?func rdf:type c:FunctionCall),
		(?func c:call ?call),
		(?call rdf:type c:FunctionRef),
		(?call c:hasName ?funcName),
		
		(?func c:hasArgumentExpr ?y),
		(?y c:NthArg ?argPos),
		(?y c:referTo ?var)
		(?y c:hasBaseType c:_IO_FILE)
		
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?prevPP),
		(?ps pa:stateValue ?stateVal),
		(?ps pa:stateRelation  ?stateRel),
		(?prevPP pa:afterStatement ?prev)
		(?prevPP pa:iteration ?iter)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)

		(?callee rdf:type c:FunctionDecl)
		(?callee c:hasName ?funcName )
		(?callee c:hasParameter ?parameter )
		(?parameter c:NthPara ?argPos )
		(?callee c:hasDefinition ?funcBody )
		(?parameter rdf:type c:Variable )
		(?parameter c:hasBaseType c:_IO_FILE )
		(?parameter c:hasType c:pointer_type )
#		(?parameter c:hasName "fin" )
		(?firstStInFunc pa:firstStatementInFunction ?funcBody )
		noValue(100,100,100)
		makeTemp(?temp1)
#		makeTemp(?temp2)
		
->
# add pseudo data to initialize parameter
		(?parameter pa:tempStateValue ?stateVal)
		(?parameter pa:tempStateRelation  ?stateRel)
#make sure no other rules are fired

		(?temp1 pa:caller ?exp)
		(?temp1 pa:callee ?callee)
		(?temp1 pa:return completed(?exp,?cond,?iter,?baseConditions))
		(?temp1 pa:updateOtherVar updateOtherVar(?prev,?exp,?cond,?pp,1))
#		(?temp1 pa:callerVariable ?temp2)
#		(?temp2 pa:variable ?var)
#		(?temp2 pa:programPoint ?pp)

		(100 100 100)		

#		print('IP call', 'iter', ?iter),
#		(1 1 updateOtherVar(?prev,?exp,?cond,?pp,1,?iter,?iter))
#		(1 1 completed(?exp,?cond,?iter,?baseConditions))
		(?firstStInFunc pa:callFunction ?funcBody )
		(?firstStInFunc pa:conditions ?cond )
]



[IPreturn:
		(?firstStInFunc pa:callFunction ?funcBody )
		(?st pa:endExecutionInFunction ?funcBody)
		(?prevSt pa:nextStatement ?st)
		(1 1 completed(?prevSt,?cond4,?iter4,?baseConditions4))
		(1 1 updateOtherVarCompleted(?prevSt,?cond4))
		
		(?temp1 pa:caller ?exp)
		(?temp1 pa:callee ?callee)
		(?temp1 pa:return completed(?exp,?cond,?iter,?baseConditions))
		(?temp1 pa:updateOtherVar updateOtherVar(?prev,?exp,?cond,?pp,1))
		(?pp pa:iteration ?iter)

->
		remove(0)
#		print('Ipreturn' ?exp)
		(1 1 completed(?exp,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?exp,?cond,?pp,1,?iter,?iter))
]


# inter-procedural function call
# if the function call has same name and one of the paremeters
# is of FILE type
[IPCallNoDef:
		(1 1 execute(?prev,?exp,?cond,?pp)),
		(?exp rdf:type c:ExpressionStatement),
		(?exp c:hasExpression ?func),		
		(?func rdf:type c:FunctionCall),
		(?func c:call ?call),
		(?call rdf:type c:FunctionRef),
		(?call c:hasName ?funcName),
		
		(?func c:hasArgumentExpr ?y),
		(?y c:NthArg ?argPos),
		(?y c:referTo ?var)
		(?y c:hasBaseType c:_IO_FILE)
		
		(?var pa:hasPointerState ?ps),
		(?ps pa:atProgramPoint ?prevPP),
		(?ps pa:stateValue ?stateVal),
		(?ps pa:stateRelation  ?stateRel),
		(?prevPP pa:afterStatement ?prev)
		(?prevPP pa:iteration ?iter)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)

		(?callee rdf:type c:FunctionDecl)
		(?callee c:hasName ?funcName )
		(?callee c:hasParameter ?parameter )
		(?parameter c:NthPara ?argPos )
		noValue(?callee,c:hasDefinition,?funcBody )
		(?parameter rdf:type c:Variable )
		(?parameter c:hasBaseType c:_IO_FILE )
		(?parameter c:hasType c:pointer_type )

		noValue(100,100,100)


		
->
		(?parameter pa:hasPointerState ?ps)

		(100 100 100)		

#		print('IP call no def', 'iter', ?iter),
		(1 1 updateOtherVar(?prev,?exp,?cond,?pp,1,?iter,?iter))
		(1 1 completed(?exp,?cond,?iter,?baseConditions))
]

# Skip IP call with no file parameters; func(a,b) no fp
[SkipIPCall:
		(1 1 execute(?prev,?exp,?cond,?pp)),
		(?exp rdf:type c:ExpressionStatement),
		(?exp c:hasExpression ?func),		
		(?func rdf:type c:FunctionCall),
		(?func c:call ?call),
		(?call rdf:type c:FunctionRef)
		(?call c:hasName ?funcName)
# Not a library function
		(?callee rdf:type c:FunctionDecl)
		(?callee c:hasName ?funcName )
		
		(?func c:hasArgumentExpr ?y)
		(?y c:NthArg ?argPos)
#		(?y c:referTo ?var)
		noValue(?y,c:hasBaseType,c:_IO_FILE)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		
->
		remove(0)
#		print('Skip IP call with no file parameters', 'exp', ?exp),
		(1 1 updateOtherVar(?prev,?exp,?cond,?pp,1,?iter,?iter))
		(1 1 completed(?exp,?cond,?iter,?baseConditions))
]



# ch = Skip IP call with no file parameters; ch = func(a,b) no fp
[fgetcCall:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:ExpressionStatement )
		(?st c:hasExpression ?expr )
		(?expr rdf:type c:AssignOp )
		(?expr c:hasLeftOperand ?left )
		(?expr c:hasRightOperand ?func )
		(?left rdf:type c:VariableRef )
		(?left c:referTo ?var )
		noValue(?left,c:hasBaseType,c:_IO_FILE)
		(?func rdf:type c:FunctionCall),
		(?func c:call ?call),
		(?call rdf:type c:FunctionRef),
		(?call c:hasName ?funcName),

		(?func c:hasArgumentExpr ?y),
		(?y c:NthArg ?argPos),
#		(?y c:referTo ?var)
		noValue(?y,c:hasBaseType,c:_IO_FILE)
		
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
#		print('Skip IP call assignment with no file parameters', 'st', ?st),
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter))
		(1 1 completed(?st,?cond,?iter,?baseConditions))
]


# ch = Skip IP call with no file parameters; ch = func(a,b) no fp
[fgetcCall:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:ExpressionStatement )
		(?st c:hasExpression ?expr )
		(?expr rdf:type c:AssignOp )
		(?expr c:hasLeftOperand ?left )
		(?expr c:hasRightOperand ?hro)
		(?left rdf:type c:VariableRef )
		(?left c:referTo ?var )
		noValue(?left,c:hasBaseType,c:_IO_FILE)
		(?hro c:hasOperand ?func)
		(?func rdf:type c:FunctionCall),
		(?func c:call ?call),
		(?call rdf:type c:FunctionRef),
		(?call c:hasName ?funcName),

		(?func c:hasArgumentExpr ?y),
		(?y c:NthArg ?argPos),
#		(?y c:referTo ?var)
		noValue(?y,c:hasBaseType,c:_IO_FILE)
		
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
#		print('Skip IP call assignment with no file parameters', 'st', ?st),
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter))
		(1 1 completed(?st,?cond,?iter,?baseConditions))
]







# Skip IP call with no parameters; func()
[SkipIPCall:
		(1 1 execute(?prev,?exp,?cond,?pp)),
		(?exp rdf:type c:ExpressionStatement),
		(?exp c:hasExpression ?func),		
		(?func rdf:type c:FunctionCall),
		(?func c:call ?call),
		(?call rdf:type c:FunctionRef),
		(?call c:hasName ?funcName),
		
		noValue(?func, c:hasArgumentExpr, ?y),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		
->
#		print('Skip IP call with no parameters', 'iter', ?iter),
		(1 1 updateOtherVar(?prev,?exp,?cond,?pp,1,?iter,?iter))
		(1 1 completed(?exp,?cond,?iter,?baseConditions))
]



# ch = Skip IP call with no parameters; ch = func()
[fgetcCall:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:ExpressionStatement )
		(?st c:hasExpression ?expr )
		(?expr rdf:type c:AssignOp )
		(?expr c:hasLeftOperand ?left )
		(?expr c:hasRightOperand ?func )
		(?left rdf:type c:VariableRef )
		(?left c:referTo ?var )
		noValue(?left,c:hasBaseType,c:_IO_FILE)
		(?func rdf:type c:FunctionCall),
		(?func c:call ?call),
		(?call rdf:type c:FunctionRef),
		(?call c:hasName ?funcName),

		noValue(?func,c:hasArgumentExpr, ?y),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
#		print('Skip IP call assignment with no parameters', 'iter', ?iter),
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter))
		(1 1 completed(?st,?cond,?iter,?baseConditions))
]



# ch = Skip IP call with no file parameters; int ch = func(a,b) no fp
[fgetcCall:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st rdf:type c:Variable) ,
#		(?st c:hasBaseType c:unsigned_long)
		(?st c:hasInitializer  ?z), 
		(?z c:hasInitialValue  ?x), 
		(?x rdf:type c:CastOp),
		(?x c:hasOperand ?call),
		(?call rdf:type c:FunctionCall),

		(?call c:hasArgumentExpr ?y),
		(?y c:NthArg ?argPos),
#		(?y c:referTo ?var)
		noValue(?y,c:hasBaseType,c:_IO_FILE)
		
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
->
#		print('Skip IP call assignment with no file parameters; int ch = func(a,b) no fp', 'st', ?st),
#		(1 1 updateVarList(?st,?baseConditions,?cond))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter))
		(1 1 completed(?st,?cond,?iter,?baseConditions))
]

