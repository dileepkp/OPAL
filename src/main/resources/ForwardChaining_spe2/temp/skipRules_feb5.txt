@prefix c: <http://www.semanticweb.org/yzhao30/ontologies/2015/7/c#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix pa: <http://www.semanticweb.org/aidb/ontologies/BugFindingOntology#> .
@prefix fl: <http://www.semanticweb.org/aidb/ontologies/FileLibraryOntology#> .


##################################################################################################################################
################################ Skip rules for Variable Declarations ############################################################


# skip not int i; not file *fp;
[analyzeFirstStatement2:
		(1 1 execute(?prev,?st,?cond,?pp))
		(?st rdf:type c:Variable),
		noValue(?st,c:hasInitializer),
		noValue(?st, c:hasType, c:int)
		noValue(?st, c:hasType, c:long_long)
		noValue(?st, c:hasType, c:long)
		noValue(?st, c:hasType, c:unsigned_long)
		noValue(?st, c:hasType, c:unsigned_int)
		noValue(?st, c:hasBaseType, c:_IO_FILE)
		(?pp pa:baseConditions ?baseConditions)
		(?pp pa:iteration ?iter)



#		(?intDataTypeList rdf:type pa:intDataTypeList)
#		(?intDataTypeList rdf:item ?dt)
#		makeTemp(?ps)
->
		
		print('skip not int i; not file *fp;')
#		(1 1 updateVarList(?st,?baseConditions,?cond))
#		(?st pa:hasPointerState ?ps),
#		(?ps pa:atProgramPoint ?pp),
	
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter))
]


# skip not int i=0;not FILE *fp=...
[assign1:
		(1 1 execute(?prev,?vardecl,?cond,?pp))
		(?vardecl rdf:type c:VariableDecl)
		(?vardecl c:hasInitializer ?assign)
		noValue(?vardecl, c:hasType, c:int)
		noValue(?vardecl, c:hasType, c:long_long)
		noValue(?vardecl, c:hasType, c:long)
		noValue(?vardecl, c:hasType, c:unsigned_long)
		noValue(?vardecl, c:hasType, c:unsigned_int)
		noValue(?vardecl, c:hasBaseType, c:_IO_FILE)
		(?assign rdf:type c:AssignInitializer)

#		(?assign c:hasInitialValue ?operand)
#		(?operand c:hasOperand ?value)
#		(?value rdf:type c:Value)
#		(?value c:hasValue ?concreteVal)

		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
#		makeTemp(?ps)
		
#		(?intDataTypeList rdf:type pa:intDataTypeList)
#		(?intDataTypeList rdf:item ?dt)

->
#		(1 1 updateVarList(?vardecl,?baseConditions,?cond))
#		(?vardecl pa:hasPointerState ?ps),
#		(?ps pa:atProgramPoint ?pp),
#		(?ps pa:stateValue ?concreteVal),
#		(?ps pa:stateRelation pa:equals),

		print('skip not i=0;not fp=...'),		
		(1 1 completed(?vardecl,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?vardecl,?cond,?pp,1,?iter,?iter))

]


# skip Assignment Statement i = 0 ; i not int and file
[forInitStatement:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?st c:hasExpression ?expr),
		(?expr rdf:type c:AssignOp),
		(?expr c:hasLeftOperand ?left),
		(?expr c:hasRightOperand ?right),
		(?left c:referTo ?var),
		noValue(?st, c:hasType, c:int)
		noValue(?st, c:hasType, c:long_long)
		noValue(?st, c:hasType, c:long)
		noValue(?st, c:hasType, c:unsigned_long)
		noValue(?st, c:hasType, c:unsigned_int)
		noValue(?var, c:hasBaseType, c:_IO_FILE)

#		(?right c:hasOperand ?val),
#		(?val rdf:type c:Value),
#		(?val c:hasValue ?concreteVal),
#		(?val c:hasType c:int),

		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
#		makeTemp(?ps)

#		(?intDataTypeList rdf:type pa:intDataTypeList)
#		(?intDataTypeList rdf:item ?dt)

#		(?varList rdf:type pa:varList),		
#		noValue(?varList, rdf:item, ?var),
#		(?varList pa:baseConditions ?baseConditions)
#		(?varList pa:inPath ?cond)
		
->
#		(?var pa:hasPointerState ?ps),
#		(?ps pa:atProgramPoint ?pp),
		print(' skip Assignment Statement i = 0 ; i not int and file '),
#		(?ps pa:stateValue ?concreteVal),
#		(?ps pa:stateRelation  pa:equals),
		
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter))
]




