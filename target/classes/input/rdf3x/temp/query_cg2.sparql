select ?st 
where {
?st a <c#ForStatement>.
?st <c#hasForInit> ?init .
?st <c#hasForTest> ?test .
?st <c#hasForIncr> ?incr .
{

?init <c#hasExpression> ?einit.
?einit a <c#AssignOp>.
?einit <c#hasLeftOperand> ?linit.
?linit <c#referTo> ?initVar.
}

UNION
{
?ass <c#hasParent> ?init .
?init a <c#VariableDecl>.
?ass a <c#AssignInitializer> .
}



{?test a <c#LessOp>.} UNION {?test a <c#GreaterOp>.} UNION {?test a <c#LeqOp>.} UNION {?test a <c#GeqOp>.}
{?test <c#hasLeftOperand> ?optest.} UNION {?test <c#hasRightOperand> ?optest.}
?optest <c#referTo> ?initVar.



{?incr a <c#PostfixIncrementOp>.} UNION {?incr a <c#PostfixDecrementOp>.} UNION {?incr a <c#AddAssignOp>.} UNION {?incr a <c#SubAssignOp>.} UNION  {?incr a <c#AssignOp>.}
{?incr <c#hasOperand> ?op.} UNION {?incr <c#hasLeftOperand> ?op.}
?op <c#referTo> ?initVar.










}
