@prefix c: <http://www.semanticweb.org/yzhao30/ontologies/2015/7/c#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix pa: <http://www.semanticweb.org/aidb/ontologies/BugFindingOntology#> .
@prefix fl: <http://www.semanticweb.org/aidb/ontologies/FileLibraryOntology#> .


###############################################################################################################################
################################ Analyze Variable Declarations ############################################################




#A scalar variable declaration without assignment
[rule1:
		(1 1 execute(?prev,?st,?cond,?pp))
		(?st rdf:type c:Variable),
		noValue(?st,c:hasInitializer),
		(?st c:hasType ?dt)
		(?pp pa:baseConditions ?baseConditions)
		(?pp pa:iteration ?iter)

		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)

->
		
		print('int variable declaration without assignment')
		(1 1 updateVarList(?st,?baseConditions,?cond))
		(1 1 makePS(?st, ?pp, ?cond))
		(1 1 completed(?st,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,?st,?iter,?iter))
]



#A scalar variable declaration with constant assignment
[rule2:
		(1 1 execute(?prev,?vardecl,?cond,?pp))
		(?vardecl rdf:type c:VariableDecl)
		(?vardecl c:hasInitializer ?initializer)
		(?vardecl c:hasType ?dt)
		(?initializer rdf:type c:AssignInitializer)
		(?initializer c:hasInitialValue ?operand)
		(?operand c:hasOperand ?value)
		(?value rdf:type c:Value)
		(?value c:hasValue ?concreteVal)
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		makeTemp(?ps)
		
		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)

->
		(1 1 updateVarList(?vardecl,?baseConditions,?cond))
		(1 1 makePS2(?vardecl, ?pp, ?cond,?concreteVal, pa:equals))
		
		(1 1 completed(?vardecl,?cond,?iter,?baseConditions))
(1 1 updateOtherVar(?prev,?vardecl,?cond,?pp,?vardecl,?iter,?iter))
		print('assign1',?vardecl)
]


#A scalar variable declaration with constant assignment
[rule3:
		(1 1 execute(?prev,?vardecl,?cond,?pp))
		(?vardecl rdf:type c:VariableDecl)
		(?vardecl c:hasInitializer ?initializer),
		(?initializer rdf:type c:AssignInitializer),
		(?initializer c:hasInitialValue ?value),
		(?value rdf:type c:Value),
		(?value c:hasValue ?concreteVal)
		(?vardecl c:hasType ?dt)

		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		makeTemp(?ps)
		
		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)

->
		(1 1 makePS2(?vardecl, ?pp, ?cond,?concreteVal, pa:equals))
		(1 1 updateVarList(?vardecl,?baseConditions,?cond))
		(1 1 completed(?vardecl,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?vardecl,?cond,?pp,?vardecl,?iter,?iter))

		print('assign1',?vardecl,?prev, ?pp)

]


#A scalar variable declaration with expression assignment
[rule4:
		(1 1 execute(?prev,?vardecl,?cond,?pp))
		(?vardecl rdf:type c:VariableDecl)
		(?vardecl c:hasInitializer ?initializer)
		(?vardecl c:hasType ?dt)
		(?initializer rdf:type c:AssignInitializer)
		(?initializer c:hasInitialValue ?right)
		(?right rdf:type ?arithOp)
		(?arithmeticOp rdf:type pa:arithmeticOperators)
		(?arithmeticOp rdf:item ?arithOp)
		
		(?intDataTypeList rdf:type pa:intDataTypeList)
		(?intDataTypeList rdf:item ?dt)

		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		
		(?varList rdf:type pa:varList)
		(?prevPP pa:afterStatement ?prev)
		(?prevPP pa:iteration ?iter)
		
		getValueOfExpression(?varList, ?prevPP, ?right, ?newVal)
	
->

#		print('A scalar variable declaration with expression assignment'),
		(1 1 updateVarList(?vardecl,?baseConditions,?cond))
		(1 1 makePS2(?vardecl, ?pp, ?cond,?newVal, pa:equals))
		(1 1 completed(?vardecl,?cond,?iter,?baseConditions))
		(1 1 updateOtherVar(?prev,?vardecl,?cond,?pp,?vardecl,?iter,?iter))
]





