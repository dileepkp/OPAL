@prefix c: <http://www.semanticweb.org/yzhao30/ontologies/2015/7/c#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix pa: <http://www.semanticweb.org/aidb/ontologies/BugFindingOntology#> .
@prefix fl: <http://www.semanticweb.org/aidb/ontologies/FileLibraryOntology#> .


##################################################################################################################################
################################ false rules #####################################################################################

# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExitSubset:

		(1 1 execute(?prev,?st,?cond,?pp)),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?par pa:iterationIndex func0(?cond2,?index))

	
		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?st c:hasParent ?par)
->
		(2 2 f0(?cond2,?cond,?index,?cond))
		print('dummy cfg exit false subset 1',?st)
]

[rule1:
		(2 2 f0(?cond2,?cond,?index,?originalCond))
		equal(?cond2,?cond)
->
		remove(0)
		(1 1 func0(?cond2,?originalCond,?index))
]

[rule2:
		(2 2 f0(?cond2,?cond,?index,?originalCond))
		notEqual(?cond2,?cond)
		(?cond rdf:item ?newCond)
		(?newCond rdf:type pa:conditionList)
->
		remove(0)
		(2 2 f0(?cond2,?newCond,?index,?originalCond))
]


# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExit:

		(1 1 execute(?prev,?st,?cond,?pp)),
		(1 1 func0(?cond2,?cond,?index)) 
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?par pa:iterationIndex func0(?cond2,?index))

	
		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?st c:hasParent ?par)
->
		remove(0)
		remove(1)
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter)),
		(1 1 completed(?st,?cond,?index,?baseConditions))
		print('dummy cfg exit false',?st)
]


##################################################################################################################################
################################ true rules #####################################################################################


# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExitSubset:

		(1 1 execute(?prev,?st,?cond,?pp)),
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?par pa:iterationIndex func1(?cond2,?index))

	
		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?st c:hasParent ?par)
->
		(2 2 f1(?cond2,?cond,?index,?cond))
		print('dummy cfg exit true subset 1',?st)
]

[rule1:
		(2 2 f1(?cond2,?cond,?index,?originalCond))
		equal(?cond2,?cond)
->
		remove(0)
		(1 1 func1(?cond2,?originalCond,?index))
]

[rule2:
		(2 2 f1(?cond2,?cond,?index,?originalCond))
		notEqual(?cond2,?cond)
		(?cond rdf:item ?newCond)
		(?newCond rdf:type pa:conditionList)
->
		remove(0)
		(2 2 f1(?cond2,?newCond,?index,?originalCond))
]



# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExit:
		(1 1 execute(?prev,?st,?cond,?pp)),
		(1 1 func1(?cond2,?cond,?index)) 
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?par pa:iterationIndex func1(?cond2,?index))


		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?st c:hasParent ?par)
		makeTemp(?pp2)

		
->
		remove(0)		
		remove(1)

		(?pp2 rdf:type pa:ProgramPoint),
		(?pp2 pa:afterStatement ?prev),
		(?pp2 pa:hasProgramConditions ?cond),
		(?pp2 pa:iteration ?index)
		(?pp2 pa:baseConditions ?baseConditions)

		(1 1 updateOtherVar(?prev,?st,?cond,?pp2,1,?iter,?index)),

		(1 1 completed(?st,?cond,?index,?baseConditions))
		print('dummy cfg exit true',?st)
]


##################################################################################################################################
################################ commented rules #####################################################################################

# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExit:
(-2 -2 -2)
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?par pa:previousIterationIndex_0 ?index)
		(?par pa:iterationIndexEnable_0 ?cond)			
		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?st c:hasParent ?par)

#		(?st pa:hasDepth ?depth)
#		product(?depth,?iter,?temp)
#		difference(?depth,1,?listIndex)
#		listEntry(?cond, ?listIndex, ?listItem)	
#		equal(?listItem,?cond2)

->
		remove(0)
		remove(1)
		remove(2)
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter)),

		(1 1 completed(?st,?cond,?index,?baseConditions))
		print('dummy cfg exit false',?st)
]




# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExit:
(-2 -2 -2)
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?par pa:previousIterationIndex_1 ?index)	
		(?par pa:iterationIndexEnable_1 ?cond)	
		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?st c:hasParent ?par)
		makeTemp(?pp2)

		
->
		remove(0)		
		remove(1)
		remove(2)

		(?pp2 rdf:type pa:ProgramPoint),
		(?pp2 pa:afterStatement ?prev),
		(?pp2 pa:hasProgramConditions ?cond),
		(?pp2 pa:iteration ?index)
		(?pp2 pa:baseConditions ?baseConditions)

		(1 1 updateOtherVar(?prev,?st,?cond,?pp2,1,?iter,?index)),

		(1 1 completed(?st,?cond,?index,?baseConditions))
		print('dummy cfg exit true',?st)
]



# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExit:
(-2 -2 -2)
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?par pa:previousIterationIndex_0 ?index)
		(?par pa:iterationIndexEnable_0 ?cond2)	

		listContains(?cond,?cond2)

		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?st c:hasParent ?par)
->
		remove(0)
		remove(1)
		remove(2)
		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter)),

#		(1 1 completed(?st,?cond,?index,?baseConditions))
		print('dummy cfg exit false2',?st,?cond2)
#		print('len:',?len,?len2)
]




# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExit:
(-2 -2 -2)
		(1 1 execute(?prev,?st,?cond,?pp)),
		(?par pa:previousIterationIndex_1 ?index)	
		(?par pa:iterationIndexEnable_1 ?cond2)
		listContains(?cond,?cond2)	
		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?st c:hasParent ?par)
		makeTemp(?pp2)

		
->
		remove(0)		
		remove(1)
		remove(2)

		(?pp2 rdf:type pa:ProgramPoint),
		(?pp2 pa:afterStatement ?prev),
		(?pp2 pa:hasProgramConditions ?cond),
		(?pp2 pa:iteration ?index)
		(?pp2 pa:baseConditions ?baseConditions)

		(1 1 updateOtherVar(?prev,?st,?cond,?pp2,1,?iter,?index)),

		(1 1 completed(?st,?cond,?index,?baseConditions))
		print('dummy cfg exit true2',?st)
]



# A dummy exit statement created in cfg.
# Simply pass control to the next statement.
[dummyCFGExitTest:
(-2 -2 -2)
		(1 1 execute(?prev,?st,?cond,?pp)),
#		(1 1 execute(?prev,ftp:/home/demo/pato/tools/onto-build-rose/test/spec/feat.c#520_2_526_2_exit,?cond,?pp))
		(?par pa:previousIterationIndex_0 ?index)
		(?par pa:iterationIndexEnable_0 ?cond2)			
		strConcat(?st,?st2),
		regex(?st2,'.*exit$')
		(?pp pa:iteration ?iter)
		(?pp pa:baseConditions ?baseConditions)
		(?st c:hasParent ?par)
->
#		remove(0)
#		remove(1)
#		remove(2)
#		(1 1 updateOtherVar(?prev,?st,?cond,?pp,1,?iter,?iter)),

#		(1 1 completed(?st,?cond,?index,?baseConditions))
		print('dummy cfg exit false test',?st)
]

